{"version":3,"sources":["useAnimationFrame.js","Bulky.js","serviceWorker.js","index.js"],"names":["useAnimationFrame","callback","requestRef","React","useRef","previousTimeRef","useEffect","current","requestAnimationFrame","animate","time","undefined","deltaTime","cancelAnimationFrame","Bulky","useState","count","setCount","letterstyles","setLetterStyles","prevCount","lettermod","offset","period","Math","sin","PI","getSinCycleMod","lowerlimit","modifiers","map","tempstyles","color","transform","zIndex","className","style","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOAyBeA,G,MAvBW,SAAAC,GAGtB,IAAMC,EAAaC,IAAMC,SACnBC,EAAkBF,IAAMC,SAI9BD,IAAMG,WAAU,WAWZ,OADAJ,EAAWK,QAAUC,uBATL,SAAVC,EAAUC,GACZ,QAAgCC,IAA5BN,EAAgBE,QAAuB,CACvC,IAAMK,EAAYF,EAAOL,EAAgBE,QACzCN,EAASW,GAEbP,EAAgBE,QAAUG,EAC1BR,EAAWK,QAAUC,sBAAsBC,MAIxC,kBAAMI,qBAAqBX,EAAWK,YAC9C,MCoDQO,EAtED,WAAO,IAAD,EACUC,mBAAS,GADnB,mBACTC,EADS,KACFC,EADE,OAEwBF,mBAAS,IAFjC,mBAETG,EAFS,KAEKC,EAFL,KA6DhB,OAzDAnB,GAAkB,SAAAY,GAGdK,GAAS,SAAAG,GAAS,OAAKA,EAAwB,IAAZR,QAKvCN,qBAAU,WACN,IAQMe,EAAY,SAACC,GACf,OARmB,SAACC,EAAQD,GAE5B,OAAOE,KAAKC,KAAOT,EAASM,EAASC,GAAWA,EAAUA,EAAU,EAAIC,KAAKE,IAMvDC,CATb,GASoCL,IAAe,MAJ9BM,EAIwB,MAHLA,EAD9B,IAAWA,GAM9BC,EAAY,CAAC,EAAG,EAAG,EAAG,EAAG,GAEzBb,IACAa,EAAY,CAAC,EAAG,GAAK,GAAK,GAAK,IAAKC,KAAI,SAACR,GACrC,OAAOD,EAAUC,OAGzB,IAAIS,EAAa,CACb,CACIC,MAAO,QACPC,UAAW,0BAA4BJ,EAAU,GAAK,IAAqB,IAAfA,EAAU,GAAW,sBACjFK,OAAQ,GAEZ,CACIF,MAAO,QACPC,UAAW,yBAA2BJ,EAAU,GAAK,IAAqB,IAAfA,EAAU,GAAW,sBAChFK,OAAQ,GAEZ,CACIF,MAAO,QACPE,OAAQ,EACRD,UAAW,SAAWJ,EAAU,GAAK,IAAqB,IAAfA,EAAU,GAAW,uBAEpE,CACIG,MAAO,QACPC,UAAW,0BAA4BJ,EAAU,GAAK,IAAqB,IAAfA,EAAU,GAAW,sBACjFK,OAAQ,GAEZ,CACIF,MAAO,QACPC,UAAW,2BAA6BJ,EAAU,GAAK,IAAqB,IAAfA,EAAU,GAAW,sBAClFK,OAAQ,IAGhBf,EAAgBY,KACjB,CAACf,IAEG,yBAAKmB,UAAW,SACnB,yBAAKC,MAAOlB,EAAa,GAAIiB,UAAW,eAAxC,KACA,yBAAKC,MAAOlB,EAAa,GAAIiB,UAAW,eAAxC,KACA,yBAAKC,MAAOlB,EAAa,GAAIiB,UAAW,eAAxC,KACA,yBAAKC,MAAOlB,EAAa,GAAIiB,UAAW,eAAxC,KACA,yBAAKC,MAAOlB,EAAa,GAAIiB,UAAW,eAAxC,OC1DYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.56b248a2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst useAnimationFrame = callback => {\r\n    // Use useRef for mutable variables that we want to persist\r\n    // without triggering a re-render on their change\r\n    const requestRef = React.useRef();\r\n    const previousTimeRef = React.useRef();\r\n\r\n\r\n\r\n    React.useEffect(() => {\r\n        const animate = time => {\r\n            if (previousTimeRef.current !== undefined) {\r\n                const deltaTime = time - previousTimeRef.current;\r\n                callback(deltaTime)\r\n            }\r\n            previousTimeRef.current = time;\r\n            requestRef.current = requestAnimationFrame(animate);\r\n        }\r\n\r\n        requestRef.current = requestAnimationFrame(animate);\r\n        return () => cancelAnimationFrame(requestRef.current);\r\n    }, []); // Make sure the effect runs only once\r\n}\r\n\r\nexport default useAnimationFrame\r\n","import React, {useEffect, useState} from \"react\";\r\nimport './Bulky.css';\r\nimport useAnimationFrame from './useAnimationFrame'\r\n\r\nconst Bulky = () => {\r\n    const [count, setCount] = useState(0)\r\n    const [letterstyles, setLetterStyles] = useState([])\r\n\r\n    useAnimationFrame(deltaTime => {\r\n        // Pass on a function to the setter of the state\r\n        // to make sure we always have the latest state\r\n        setCount(prevCount => (prevCount + deltaTime * 0.01))\r\n    })\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        let period = 10\r\n        const getSinCycleMod = (period, offset) => {\r\n            // ofset from 0 to 1\r\n            return Math.sin((((count + (offset * period)) % period) / period) * 2 * Math.PI)\r\n        }\r\n        const spreadCycleMod = (cycleMod, lowerlimit, upperlimit) => {\r\n            return (cycleMod *  (upperlimit - lowerlimit)) + lowerlimit\r\n        }\r\n        const lettermod = (offset) => {\r\n            return spreadCycleMod(getSinCycleMod(period, offset), 0.99, 1.01)\r\n        }\r\n        let modifiers = [1, 1, 1, 1, 1]\r\n\r\n        if (count) {\r\n            modifiers = [0, 0.2, 0.4, 0.6, 0.8].map((offset) => {\r\n                return lettermod(offset)\r\n            })\r\n        }\r\n        let tempstyles = [\r\n            {\r\n                color: \"white\",\r\n                transform: \"translateX(15vw) scale(\" + modifiers[0] + \",\" + modifiers[1] * 2.2 + \") translateY(-10px)\",\r\n                zIndex: 1\r\n            },\r\n            {\r\n                color: \"black\",\r\n                transform: \"translateX(7vw) scale(\" + modifiers[1] + \",\" + modifiers[2] * 2.2 + \") translateY(-10px)\",\r\n                zIndex: 2\r\n            },\r\n            {\r\n                color: \"white\",\r\n                zIndex: 3,\r\n                transform: \"scale(\" + modifiers[2] + \",\" + modifiers[3] * 2.2 + \") translateY(-10px)\"\r\n            },\r\n            {\r\n                color: \"black\",\r\n                transform: \"translateX(-7vw) scale(\" + modifiers[3] + \",\" + modifiers[4] * 2.2 + \") translateY(-10px)\",\r\n                zIndex: 2\r\n            },\r\n            {\r\n                color: \"white\",\r\n                transform: \"translateX(-15vw) scale(\" + modifiers[4] + \",\" + modifiers[0] * 2.2 + \") translateY(-10px)\",\r\n                zIndex: 1\r\n            }\r\n        ]\r\n        setLetterStyles(tempstyles)\r\n    }, [count])\r\n\r\n    return <div className={'bulky'}>\r\n        <div style={letterstyles[0]} className={'bulkyletter'}>B</div>\r\n        <div style={letterstyles[1]} className={'bulkyletter'}>U</div>\r\n        <div style={letterstyles[2]} className={'bulkyletter'}>L</div>\r\n        <div style={letterstyles[3]} className={'bulkyletter'}>K</div>\r\n        <div style={letterstyles[4]} className={'bulkyletter'}>Y</div>\r\n    </div>\r\n};\r\n\r\nexport default Bulky;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import FishTank from './FishTank';\n// import Smoke from './Smoke'\n// import Radio from './Radio'\nimport Bulky from './Bulky'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Bulky />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}