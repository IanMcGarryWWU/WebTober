{"version":3,"sources":["Fish.js","FishTank.js","serviceWorker.js","index.js"],"names":["Fish","props","height","fishinfo","xoffset","scale","colour","animpercent","speed","fishx","width","d","transform","fill","FishTank","useDimensions","ref","React","useState","count","setCount","callback","requestRef","useRef","previousTimeRef","useEffect","current","requestAnimationFrame","animate","time","undefined","deltaTime","cancelAnimationFrame","useAnimationFrame","prevCount","randbetween","miny","maxy","Math","random","minspeed","maxspeed","numfish","N","Array","from","length","_","index","map","x","genSchool","aschool","className","afishinfo","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mQAsBeA,G,YAnBF,SAACC,GACV,IAAIC,EAASD,EAAME,SAASD,OACxBE,EAAUH,EAAME,SAASC,QACzBC,EAAQJ,EAAME,SAASE,MACvBC,EAASL,EAAME,SAASG,OACxBC,EAAcN,EAAMM,YACpBC,EAAQP,EAAME,SAASK,MAEvBC,EAASR,EAAMS,QAAYH,EAAcC,EAASJ,GAAY,KAArD,KAA0EH,EAAMS,MAAQ,EAErG,OAAO,2BACH,0BAAMC,EAAE,0VACAC,UAAa,aAAgBH,EAAQ,KAAOP,EAAS,WAAaG,EAAQ,KAAOA,EAAQ,IAC3FQ,KAAQP,OC0DPQ,EA9CE,WAAO,IAAD,EACWC,cAAtBC,EADW,EACXA,IAAKN,EADM,EACNA,MAAOR,EADD,EACCA,OADD,EAEOe,IAAMC,SAAS,GAFtB,mBAEZC,EAFY,KAELC,EAFK,MAvBG,SAAAC,GAGtB,IAAMC,EAAaL,IAAMM,SACnBC,EAAkBP,IAAMM,SAI9BN,IAAMQ,WAAU,WAWZ,OADAH,EAAWI,QAAUC,uBATL,SAAVC,EAAUC,GACZ,QAAgCC,IAA5BN,EAAgBE,QAAuB,CACvC,IAAMK,EAAYF,EAAOL,EAAgBE,QACzCL,EAASU,GAEbP,EAAgBE,QAAUG,EAC1BP,EAAWI,QAAUC,sBAAsBC,MAIxC,kBAAMI,qBAAqBV,EAAWI,YAC9C,IAOHO,EAAkB,SAAAF,GAGdX,GAAS,SAAAc,GAAS,OAAKA,EAAwB,IAAZH,GAAoB,UAG3D,IAAMI,EAAc,SAACC,EAAMC,GACvB,OAASA,EAAOD,GAAQE,KAAKC,SAAWH,GAQ5C,IAnBmB,EAmCWlB,mBAhBX,SAACkB,EAAMC,EAAMG,EAAUC,EAAUC,GAChD,IAAMC,EAAID,EAGV,OAFeE,MAAMC,KAAK,CAACC,OAAQH,IAAI,SAACI,EAAGC,GAAJ,OAAcA,EAAQ,KAE/CC,KAAI,SAACC,GACf,MAAO,CACHF,MAAOE,EACPhD,OAAQiC,EAAYC,EAAMC,GAC1BjC,QAAS+B,EAAY,EAAG,KACxB9B,MAAO8B,EAAY,GAAK,IACxB3B,MAAO2B,EAAYK,EAAUC,GAC7BnC,OAdF,QAAN,OAAkC,GAAhBgC,KAAKC,SAAiB,IAAO,EAA/C,YAAuE,GAAhBD,KAAKC,SAAiB,IAAO,EAApF,YAA4G,GAAhBD,KAAKC,SAAiB,IAAO,EAAzH,WAmBmCY,EAAW,IAAK,IAAM,EAAG,EAAG,KAnChD,mBAmCZC,EAnCY,UAqCnB,OAAO,yBAAKpC,IAAKA,EAAKqC,UAAW,YAC7B,yBAAK3C,MAAOA,EAAOR,OAAQA,GACtBkD,EAAQH,KAAI,SAACK,GAAD,OACT,kBAAC,EAAD,CAAMC,IAAKD,EAAUN,MAAO7C,SAAUmD,EAAW/C,YAAaY,EAAOT,MAAOA,UCxDxE8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7fce77a8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Fish.css';\r\n\r\nconst Fish = (props) => {\r\n    let height = props.fishinfo.height\r\n    let xoffset = props.fishinfo.xoffset;\r\n    let scale = props.fishinfo.scale\r\n    let colour = props.fishinfo.colour\r\n    let animpercent = props.animpercent\r\n    let speed = props.fishinfo.speed\r\n\r\n    let fishx = (props.width *  (((animpercent * speed) + xoffset) % (1000)) * (1/500)) - (props.width / 2)\r\n\r\n    return <g>\r\n        <path d=\"M327.1 96c-89.97 0-168.54 54.77-212.27 101.63L27.5 131.58c-12.13-9.18-30.24.6-27.14 14.66L24.54 256 .35 365.77c-3.1 14.06 15.01 23.83 27.14 14.66l87.33-66.05C158.55 361.23 237.13 416 327.1 416 464.56 416 576 288 576 256S464.56 96 327.1 96zm87.43 184c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24 13.26 0 24 10.74 24 24 0 13.25-10.75 24-24 24z\"\r\n                transform = {'translate('  + fishx + ', ' + height + ') scale(' + scale + ', ' + scale + ')'}\r\n              fill = {colour}\r\n        />\r\n    </g>\r\n\r\n};\r\n\r\nexport default Fish;","import React, {useState}  from \"react\";\r\nimport useDimensions from \"react-cool-dimensions\";\r\nimport './FishTank.css';\r\nimport Fish from './Fish';\r\n\r\nconst useAnimationFrame = callback => {\r\n    // Use useRef for mutable variables that we want to persist\r\n    // without triggering a re-render on their change\r\n    const requestRef = React.useRef();\r\n    const previousTimeRef = React.useRef();\r\n\r\n\r\n\r\n    React.useEffect(() => {\r\n        const animate = time => {\r\n            if (previousTimeRef.current !== undefined) {\r\n                const deltaTime = time - previousTimeRef.current;\r\n                callback(deltaTime)\r\n            }\r\n            previousTimeRef.current = time;\r\n            requestRef.current = requestAnimationFrame(animate);\r\n        }\r\n\r\n        requestRef.current = requestAnimationFrame(animate);\r\n        return () => cancelAnimationFrame(requestRef.current);\r\n    }, []); // Make sure the effect runs only once\r\n}\r\n\r\nconst FishTank = () => {\r\n    const { ref, width, height} = useDimensions();\r\n    const [count, setCount] = React.useState(0)\r\n\r\n    useAnimationFrame(deltaTime => {\r\n        // Pass on a function to the setter of the state\r\n        // to make sure we always have the latest state\r\n        setCount(prevCount => (prevCount + deltaTime * 0.01) % 1000)\r\n    })\r\n\r\n    const randbetween = (miny, maxy) => {\r\n        return ((maxy - miny) * Math.random() + miny)\r\n    }\r\n\r\n    function getRandomColor() {\r\n\r\n        return `rgba(${ ((Math.random() * 86) + 170) | 0},${ ((Math.random() * 86) + 170) | 0},${ ((Math.random() * 86) + 170) | 0},1)`\r\n    }\r\n\r\n    const genSchool =  (miny, maxy, minspeed, maxspeed, numfish) => {\r\n        const N = numfish;\r\n        const school = Array.from({length: N}, (_, index) => index + 1);\r\n\r\n        return school.map((x) => {\r\n            return {\r\n                index: x,\r\n                height: randbetween(miny, maxy),\r\n                xoffset: randbetween(0, 1000),\r\n                scale: randbetween(0.2, 0.9),\r\n                speed: randbetween(minspeed, maxspeed),\r\n                colour: getRandomColor()\r\n            };\r\n        })\r\n    }\r\n\r\n    const [aschool, setaschool] = useState(genSchool(-100, 1000, 1, 6, 50));\r\n\r\n    return <div ref={ref} className={'FishTank'}>\r\n        <svg width={width} height={height}>\r\n            {aschool.map((afishinfo) => (\r\n                <Fish key={afishinfo.index} fishinfo={afishinfo} animpercent={count} width={width}/>\r\n                ))}\r\n        </svg>\r\n    </div>\r\n};\r\n\r\nexport default FishTank;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport FishTank from './FishTank';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <FishTank />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}