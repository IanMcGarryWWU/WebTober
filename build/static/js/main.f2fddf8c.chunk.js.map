{"version":3,"sources":["useAnimationFrame.js","AudioVisualiser.js","Radio.js","serviceWorker.js","index.js"],"names":["useAnimationFrame","callback","requestRef","React","useRef","previousTimeRef","useEffect","current","requestAnimationFrame","animate","time","undefined","deltaTime","cancelAnimationFrame","AudioVisualiser","props","canvas","createRef","this","draw","audioData","height","width","context","getContext","lineWidth","strokeStyle","fillStyle","fillRect","beginPath","randbetween","miny","maxy","Math","random","returnToBase","moveTo","map","item","index","y","amount","scaleY","max","min","i","angle","PI","getAngle","numsegments","floor","segmentlength","thisdiagonallength","x","cos","sin","randomx","randomy","lineTo","stroke","ref","Component","Radio","audioref","useState","count","setCount","analyser","dataArray","AudioContext","audioelement","source","createMediaElementSource","connect","destination","createAnalyser","fftSize","Uint8Array","frequencyBinCount","prevCount","getByteFrequencyData","className","src","crossOrigin","onClick","play","resume","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f2fddf8c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst useAnimationFrame = callback => {\r\n    // Use useRef for mutable variables that we want to persist\r\n    // without triggering a re-render on their change\r\n    const requestRef = React.useRef();\r\n    const previousTimeRef = React.useRef();\r\n\r\n\r\n\r\n    React.useEffect(() => {\r\n        const animate = time => {\r\n            if (previousTimeRef.current !== undefined) {\r\n                const deltaTime = time - previousTimeRef.current;\r\n                callback(deltaTime)\r\n            }\r\n            previousTimeRef.current = time;\r\n            requestRef.current = requestAnimationFrame(animate);\r\n        }\r\n\r\n        requestRef.current = requestAnimationFrame(animate);\r\n        return () => cancelAnimationFrame(requestRef.current);\r\n    }, []); // Make sure the effect runs only once\r\n}\r\n\r\nexport default useAnimationFrame\r\n","import React, { Component } from 'react';\r\n\r\nclass AudioVisualiser extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.canvas = React.createRef();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.draw();\r\n    }\r\n\r\n\r\n\r\n    draw() {\r\n        const { audioData } = this.props;\r\n        const canvas = this.canvas.current;\r\n        const height = canvas.height;\r\n        const width = canvas.width;\r\n        const context = canvas.getContext('2d');\r\n\r\n        context.lineWidth = 2;\r\n        // context.strokeStyle = '#878fc9';\r\n        context.strokeStyle = '#FFFFFF';\r\n        context.lineWidth = 1;\r\n        context.fillStyle = \"RGBA(53, 61, 117, 0.5)\";\r\n        context.fillRect(0, 0, width, height);\r\n        context.beginPath();\r\n\r\n        const getAngle = (index) => {\r\n            return ((index + 1)/ 22) * Math.PI * 2\r\n        }\r\n\r\n        const randbetween = (miny, maxy) => {\r\n            return ((maxy - miny) * Math.random() + miny)\r\n        }\r\n\r\n        const returnToBase = () => {\r\n            context.moveTo(width / 2, height / 2);}\r\n\r\n        const scaleY = (amount, y) => {\r\n            let inverted = 300 / amount\r\n            let buffer = 300 - inverted\r\n            y -= buffer\r\n            y *= amount\r\n            return y\r\n        }\r\n\r\n        function shuffle(a) {\r\n            let j, x, i;\r\n            for (i = a.length - 1; i > 0; i--) {\r\n                j = Math.floor(Math.random() * (i + 1));\r\n                x = a[i];\r\n                a[i] = a[j];\r\n                a[j] = x;\r\n            }\r\n            return a;\r\n        }\r\n\r\n        returnToBase()\r\n\r\n        // let tempaudiodata = shuffle(audioData)\r\n\r\n        audioData.map((item, index) => {\r\n            const modifier = (2 ** (index / 20)) / 2\r\n            let y = (((item * modifier) / 255.0) * 300)\r\n            y = scaleY(1.2, y)\r\n            y *= 1.2\r\n            y = Math.max(0, y)\r\n            y = Math.min(300, y)\r\n            returnToBase()\r\n            let angle = getAngle(index)\r\n            let numsegments = Math.floor(y / 30)\r\n            let segmentlength = y / numsegments\r\n            let i\r\n            for (i = 1; i <= numsegments; i++) {\r\n                let thisdiagonallength = segmentlength * i\r\n                let x = Math.cos(angle) * thisdiagonallength\r\n                let y = Math.sin(angle) * thisdiagonallength\r\n                let randomx = randbetween(0, 20) - 5\r\n                let randomy = randbetween(0, 20) - 5\r\n                x += randomx + (width / 2)\r\n                y += randomy\r\n                y = (height / 2) - y\r\n                context.lineTo(x, y);\r\n            }\r\n        })\r\n        context.stroke();\r\n    }\r\n    render() {\r\n        return <canvas width=\"350\" height=\"600\" ref={this.canvas} />;\r\n    }\r\n}\r\n\r\nexport default AudioVisualiser;","import React, {useEffect, useState, useRef} from \"react\";\r\nimport './Radio.css';\r\nimport useAnimationFrame from './useAnimationFrame'\r\nimport AudioVisualiser from './AudioVisualiser';\r\n\r\n\r\nconst Radio = () => {\r\n    const ref = useRef()\r\n    const audioref = useRef()\r\n    const [currentState, setCurrentState] = useState('Closed')\r\n    const [count, setCount] = useState(0)\r\n    const context = useRef()\r\n    const analyser = useRef()\r\n    const dataArray = useRef()\r\n\r\n    useEffect(() => {\r\n        context.current = new AudioContext();\r\n        let audioelement = audioref.current\r\n        let source = context.current.createMediaElementSource(audioelement);\r\n        source.connect(context.current.destination);\r\n        analyser.current = context.current.createAnalyser();\r\n        analyser.current.fftSize = 64\r\n        dataArray.current = new Uint8Array(analyser.current.frequencyBinCount)\r\n        source.connect(analyser.current);\r\n    },[audioref])\r\n\r\n    useAnimationFrame(deltaTime => {\r\n        // Pass on a function to the setter of the state\r\n        // to make sure we always have the latest state\r\n        setCount(prevCount => (prevCount + deltaTime * 0.01))\r\n    })\r\n\r\n    const clicktochoose = () => {\r\n        let audioelement = audioref.current\r\n        audioelement.play()\r\n        context.current.resume()\r\n    }\r\n\r\n    useEffect(() => {\r\n      if (context.current) {\r\n          analyser.current.getByteFrequencyData(dataArray.current)\r\n      }\r\n    }, [count])\r\n\r\n    return <div className={\"Centerer\"}>\r\n        <div className={\"TopHalf\"}>\r\n            {\r\n                dataArray.current && <AudioVisualiser audioData={dataArray.current} />\r\n            }\r\n            <audio ref={audioref} src=\"https://s1.citrus3.com:8236/stream\" crossOrigin=\"anonymous\"/>\r\n        </div>\r\n        <div className={\"RadioContainer\"}>\r\n            <div ref={ref} onClick={clicktochoose} className={\"RadioButton\"}> PLAY </div>\r\n        </div>\r\n    </div>\r\n};\r\n\r\nexport default Radio;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import FishTank from './FishTank';\n// import Smoke from './Smoke'\nimport Radio from './Radio'\n// import Bulky from './Bulky'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Radio />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}